using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Diagnostics;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using Microsoft.VisualStudio.Services.Users;
using PetCare.Auth.Application.Interfaces;
using PetCare.Auth.Domain.Interfaces;
using PetCare.Auth.Infrastructure.Auth;
using PetCare.Auth.Infrastructure.Persistence;
using PetCare.Auth.Infrastructure.Persistence.Repositories;
using PetCare.Auth.Infrastructure.Persistence.Seeding;
using PetCare.Auth.Infrastructure.Security;
using PetCare.Auth.Interfaces;
using System.Text;
using AuthService = PetCare.Auth.Infrastructure.Auth.AuthService;

using System;
using System;
var builder = WebApplication.CreateBuilder(args);

// ?? Servicios base
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo
    {
        Title = "PetCare.Auth API",
        Version = "v1",
        Description = "Microservicio de autenticación para PetCarePlatform"
    });

    // ?? JWT en Swagger
    c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        In = ParameterLocation.Header,
        Description = "Bearer {token}",
        Name = "Authorization",
        Type = SecuritySchemeType.Http,
        Scheme = "bearer"
    });

    c.AddSecurityRequirement(new OpenApiSecurityRequirement {
        {
            new OpenApiSecurityScheme {
                Reference = new OpenApiReference {
                    Type = ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            new[] { "Bearer" }
        }
    });
});

// ?? CORS abierto
builder.Services.AddCors(policy =>
{
    policy.AddPolicy("AllowAll", opt =>
        opt.AllowAnyOrigin().AllowAnyHeader().AllowAnyMethod());
});

// ?? Configuración JWT
var jwtConfig = builder.Configuration.GetSection("Jwt");
var secretKey = jwtConfig["Secret"];
if (string.IsNullOrEmpty(secretKey))
    throw new InvalidOperationException("JWT secret no configurado en appsettings.json");

// ?? Base de datos
builder.Services.AddDbContext<AuthDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("AuthConnection")));

// ?? Inyección de dependencias (dominio e infraestructura)
builder.Services.AddScoped<IUserRepository, UserRepository>();
builder.Services.AddScoped<IRefreshTokenRepository, RefreshTokenRepository>();
builder.Services.AddScoped<IRoleRepository, RoleRepository>();
builder.Services.AddScoped<RoleSeeder>();
builder.Services.AddScoped<AdminSeeder>();

// ?? Servicios de aplicación
builder.Services.AddScoped<IJwtService, JwtService>();
builder.Services.AddScoped<IAuthService, AuthService>();
builder.Services.AddScoped<IPasswordHasher<User>, PasswordHasher<User>>();

builder.Services.AddScoped<ITokenGenerator, JwtTokenGenerator>();

// ?? Autenticación JWT
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.RequireHttpsMetadata = false;
        options.SaveToken = true;
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidIssuer = jwtConfig["Issuer"],
            ValidateAudience = true,
            ValidAudience = jwtConfig["Audience"],
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            IssuerSigningKey = new SymmetricSecurityKey(
                Encoding.UTF8.GetBytes(secretKey!))
        };
    });

builder.Services.AddAuthorization();

var app = builder.Build();

// ?? Middleware
app.UseCors("AllowAll");

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

// ?? Manejo global de errores
app.UseExceptionHandler(errorApp =>
{
    errorApp.Run(async context =>
    {
        var exception = context.Features.Get<IExceptionHandlerFeature>()?.Error;
        context.Response.ContentType = "application/json";

        context.Response.StatusCode = exception is CannotUnloadAppDomainException ? 400 : 500;
        await context.Response.WriteAsJsonAsync(new
        {
            error = exception?.Message ?? "Ha ocurrido un error interno en el microservicio Auth."
        });
    });
});

app.UseHttpsRedirection();
app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();

app.MapGet("/health", () => Results.Json(new
{
    status = "Healthy",
    service = "auth-api",
    timestamp = DateTime.UtcNow
}));

using (var scope = app.Services.CreateScope())
{
    var seeder = scope.ServiceProvider.GetRequiredService<AdminSeeder>();
    seeder.Seed();
}

app.Run();
