namespace PetCare.Review.Application.UseCases
using System.Threading.Tasks;
using System;
}
using System.Threading.Tasks;
namespace PetCare.Review.Application.UseCases
{
    using PetCare.Review.Domain.Entities;
    using PetCare.Review.Domain.Repositories;
    using System;
    using System.Threading.Tasks;

    /// <summary>
    /// Handles the submission of a new review.
    /// </summary>
    public class SubmitReviewUseCase
    {
        private readonly IReviewRepository _repository;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubmitReviewUseCase"/> class.
        /// </summary>
        /// <param name="repository">The review repository.</param>
        public SubmitReviewUseCase(IReviewRepository repository)
        {
            this._repository = repository;
        }

        /// <summary>
        /// Submits a new review for a booking.
        /// </summary>
        /// <param name="bookingId">The identifier of the booking being reviewed.</param>
        /// <param name="rating">The rating given in the review.</param>
        /// <param name="comment">The comment provided in the review.</param>
        /// <returns>The unique identifier of the created review.</returns>
        public async Task<Guid> ExecuteAsync(Guid bookingId, int rating, string comment)
        {
            var review = ReviewEntity.Create(bookingId, rating, comment);
            await this._repository.AddAsync(review);
            return review.Id;
        }
    }
}
